{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNYKA3KWlAFoSQiBC/v74Ii"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hqJ0-F4n3I9p","executionInfo":{"status":"ok","timestamp":1707973081975,"user_tz":-420,"elapsed":370,"user":{"displayName":"Misuo","userId":"17400685631953215249"}},"outputId":"4d412be7-92fb-4e22-e67e-422ce6e86add"},"outputs":[{"output_type":"stream","name":"stdout","text":["2\n","3\n","False\n","5\n","True\n","9\n","3\n","4\n"]}],"source":["#Stacks is FILO = First in Last Out\n","#Lab1\n","#Stack\n","class ArrayStack:\n","    \"\"\"LIFO Stack implementation using a Python list as underlying storage.\"\"\"\n","    def __init__(self):\n","        \"\"\"Create an empty stack.\"\"\"\n","        self._data = []                         #nonpublic list instance\n","    def __len__(self):\n","        \"\"\"Return the number of elements in the stack.\"\"\"\n","        return len(self._data)\n","    def is_empty(self):\n","        \"\"\"Return True if the stack is empty.\"\"\"\n","        return len(self._data) ==  0\n","    def push(self, e):\n","        \"\"\"Add element e to the top of the stack.\"\"\"\n","        self._data.append(e)                    #new item stored at end of list\n","    def top(self):\n","        \"\"\"Return (but do not remove) the element at the top of the stack.\n","        Raise Empty excpetion if the stack is empty.\"\"\"\n","        if self.is_empty():\n","            raise Empty('Stack is empty')\n","        return self._data[-1]                   #the last item in the list\n","    def pop(self):\n","        \"\"\"Remove and return the element from the top of the stack (i.e., LIFO).\n","        Raise Empty exception if the stack is empty.\"\"\"\n","        if self.is_empty():\n","            raise Empty('Stack is empy')\n","        return self._data.pop()                 #remove last item from list\n","\n","S = ArrayStack()            #contents: []\n","S.push(5)                   #contents: [5]\n","S.push(3)                   #contents: [5, 3]\n","print(len(S))               #contents: [5, 3];      outputs 2\n","print(S.pop())              #contents: [5];         outputs 3\n","print(S.is_empty())         #contents: [5];         outputs False\n","print(S.pop())              #contents: [];          outputs 5\n","print(S.is_empty())          #contents: [];          outputs True\n","S.push(7)                   #contents: [7]\n","S.push(9)                   #contents: [7, 9]\n","print(S.top())              #contents: [7, 9];      outputs 9\n","S.push(4)                   #contents: [7, 9, 4]\n","print(len(S))               #contents: [7, 9, 4];   outputs 3\n","print(S.pop())              #contents: [7, 9];      outputs 4\n","S.push(6)                   #contents: [7, 9, 6]\n"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-Zv6FGAiLGz5","executionInfo":{"status":"ok","timestamp":1707974183288,"user_tz":-420,"elapsed":3079,"user":{"displayName":"Misuo","userId":"17400685631953215249"}},"outputId":"cf04659d-53cd-470d-a6b3-325a9ff72836"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["%pwd"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"zi1g4cWCLmN_","executionInfo":{"status":"ok","timestamp":1707974185848,"user_tz":-420,"elapsed":449,"user":{"displayName":"Misuo","userId":"17400685631953215249"}},"outputId":"daa3d3a9-6f7f-409a-c74b-939de2fe0dbf"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'/content'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["import os\n","os.path.exists('/content/drive/MyDrive/algor/Test_reverse.txt')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QkF_eFkWMUJl","executionInfo":{"status":"ok","timestamp":1707974372848,"user_tz":-420,"elapsed":544,"user":{"displayName":"Misuo","userId":"17400685631953215249"}},"outputId":"cbc6fccc-4df6-4593-98f5-53fc31e097fe"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":27}]},{"cell_type":"code","source":["#Stack\n","class ArrayStack:\n","    \"\"\"LIFO Stack implementation using a Python list as underlying storage.\"\"\"\n","    def __init__(self):\n","        \"\"\"Create an empty stack.\"\"\"\n","        self._data = []                         #nonpublic list instance\n","    def __len__(self):\n","        \"\"\"Return the number of elements in the stack.\"\"\"\n","        return len(self._data)\n","    def is_empty(self):\n","        \"\"\"Return True if the stack is empty.\"\"\"\n","        return len(self._data) == 0\n","    def push(self, e):\n","        \"\"\"Add element e to the top of the stack.\"\"\"\n","        self._data.append(e)                    #new item stored at end of list\n","    def top(self):\n","        \"\"\"Return (but do not remove) the element at the top of the stack.\n","        Raise Empty excpetion if the stack is empty.\"\"\"\n","        if self.is_empty():\n","            raise Empty('Stack is empty')\n","        return self._data[-1]                   #the last item in the list\n","    def pop(self):\n","        \"\"\"Remove and return the element from the top of the stack (i.e., LIFO).\n","        Raise Empty exception if the stack is empty.\"\"\"\n","        if self.is_empty():\n","            raise Empty('Stack is empy')\n","        return self._data.pop()                 #remove last item from list\n","\n","def reverse_file(filename):\n","    \"\"\"Overwrite given file with its contents line-by-line reversed.\"\"\"\n","    S = ArrayStack()\n","    original = open(filename)\n","    for line in original:\n","        S.push(line.rstrip('\\n'))       #we will re-insert newlines when writing\n","    original.close()\n","\n","    #now we overwrite with contents in LIFO order\n","    output = open(filename, 'w')        #reopening file overwrites original\n","    while not S.is_empty():\n","        output.write(S.pop() + '\\n')    #re-insert newline characters\n","    output.close()\n","\n","def reverse_text_with_array_stack(input_file, output_file):\n","    try:\n","        # Read content from the input file\n","        with open(input_file, 'r') as file:\n","            content = file.read()\n","\n","        # Use an array as a stack to reverse the content\n","        stack = list(content)\n","        reversed_content = []\n","        while stack:\n","            reversed_content.append(stack.pop())\n","\n","        # Write the reversed content to the output file\n","        with open(output_file, 'w') as file:\n","            file.write(''.join(reversed_content))\n","\n","        print(f\"Text reversed using array stack and saved to {output_file}\")\n","\n","    except FileNotFoundError:\n","        print(f\"Error: File '{input_file}' not found.\")\n","\n","#Output = reverse_file(\"E:\\Aj. NesT The Series\\Data Structure and Algorithms with Python\\Data.txt\")\n","Output = reverse_file(\"/content/drive/MyDrive/algor/Test_reverse.txt\")\n","#reverse_text_with_array_stack(\"/content/drive/MyDrive/algor/Test_reverse.txt\", \"/content/drive/MyDrive/algor/Test_reverse.txt\")"],"metadata":{"id":"-7LLtoSOJ1iN","executionInfo":{"status":"ok","timestamp":1707974871742,"user_tz":-420,"elapsed":4,"user":{"displayName":"Misuo","userId":"17400685631953215249"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"dada3a3b-bba2-4e5c-e70f-668931f2e8c4"},"execution_count":46,"outputs":[{"output_type":"stream","name":"stdout","text":["Text reversed using array stack and saved to /content/drive/MyDrive/algor/Test_reverse.txt\n"]}]},{"cell_type":"code","source":["#Stack\n","class ArrayStack:\n","\n","    def __init__(self):\n","        self._data = []\n","\n","    def __len__(self):\n","        return len(self._data)\n","\n","    def is_empty(self):\n","        return len(self._data) == 0\n","\n","    def push(self, e):\n","        self._data.append(e)\n","\n","    def top(self):\n","        if self.is_empty():\n","            raise Empty('Stack is empty')\n","        return self._data[-1]\n","\n","    def pop(self):\n","        if self.is_empty():\n","            raise Empty('Stack is empy')\n","        return self._data.pop()\n","\n","#An Algorithm for Matching Delimiters\n","def is_matched(expr):\n","    \"\"\"Return True if all delimiters are properly match; False otherwise.\"\"\"\n","    lefty = '({['                       #opening delimiters\n","    righty = ')}]'                      #repective closing delims\n","    S = ArrayStack()\n","    for c in expr:\n","        if c in lefty:\n","            S.push(c)                   #push left delimiter on stack\n","        elif c in righty:\n","            if S.is_empty():\n","                return False            #nothing to match with\n","            if righty.index(c) != lefty.index(S.pop()):\n","                return False            #mismatched\n","    return S.is_empty()                 #were all symbols matched?\n","\n","\n","print(is_matched('()'))\n","print(is_matched('({)'))\n","print(is_matched('({[]})'))\n","print(is_matched('[[})({]]'))\n","print(is_matched('{}[]({[]})'))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"z0riOcTJPJkq","executionInfo":{"status":"ok","timestamp":1707975486149,"user_tz":-420,"elapsed":427,"user":{"displayName":"Misuo","userId":"17400685631953215249"}},"outputId":"b1f3f325-d363-4f7d-a207-82c388491ff4"},"execution_count":53,"outputs":[{"output_type":"stream","name":"stdout","text":["True\n","False\n","True\n","False\n","True\n"]}]}]}